# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2],
          [18, 19, 20]
         ]

rotate_matrix = list(map(list, list(zip(*matrix))))

print('Матрица: ')
for i in matrix:
    print(i)
print('Перевёрнутая матрица: ')
for i in rotate_matrix:
    print(i)

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
# number = """
# 73167176531330624919225119674426574742355349194934
# 96983520312774506326239578318016984801869478851843
# 85861560789112949495459501737958331952853208805511
# 12540698747158523863050715693290963295227443043557
# 66896648950445244523161731856403098711121722383113
# 62229893423380308135336276614282806444486645238749
# 30358907296290491560440772390713810515859307960866
# 70172427121883998797908792274921901699720888093776
# 65727333001053367881220235421809751254540594752243
# 52584907711670556013604839586446706324415722155397
# 53697817977846174064955149290862569321978468622482
# 83972241375657056057490261407972968652414535100474
# 82166370484403199890008895243450658541227588666881
# 16427171479924442928230863465674813919123162824586
# 17866458359124566529476545682848912883142607690042
# 24219022671055626321111109370544217506941658960408
# 07198403850962455444362981230987879927244284909188
# 84580156166097919133875499200524063689912560717606
# 05886116467109405077541002256983155200055935729725
# 71636269561882670428252483600823257530420752963450"""

# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
import re
number ="""73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

#все пробелы и переносы заменяем пустой строкой
number_new = re.sub(r'\s', '', number)

#последовательности из 5 цифр			
strings = re.findall(r'\d{5}', number)

#список произведений цифр в последовательностях
mult_list=[]
for i in strings:
    mult=1
    for j in i:
        mult = mult * int(j)
    mult_list.append(mult)

#максимальное значение произведений:
max_mult = 0
for i in range(len(mult_list)):
    if mult_list[i] > max_mult:
        max_mult = mult_list[i]
    
index = mult_list.index(max_mult) #индекс наибольшего произведения 
smeshenie = index * 5   #смещение 1 числа последовательности из 5 цифр, имеющих наибольшее произведение
print('Дано число:', number_new)
print('Последовательность, которая дала максимальное произведение: ', strings[index])
print('Произведение цифр в  последовательности : {}'.format(max_mult))
print('Смещение первой цифры  последовательности {} в number  = {}'.format(strings[index], smeshenie))


# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

def ferz(lst):
    '''Функция принимает координаты ферзя в виде списка, возвращает
    список кортежей с координатами каждой клетки, которые она бьёт.
    
    '''
    x = lst[0]
    y = lst[1]
    #список в котором будем хранить все возможные координаты, 
    #на которых действует ферзь
    res = [] 

    #координаты по горизонтали влево - x уменьшается, y не меняется
    i = 1
    while x - i >= 1:
        res.append((x - i, y))
        i += 1
    #координаты по горизонтали вправо - x увеличивается, y не меняется
    i = 1
    while x + i <= 8:
        res.append((x + i, y))
        i += 1
    #координаты по вертикали вниз - x не меняется, y уменьшается
    i = 1
    while y - i >= 1:
        res.append((x, y - i))
        i += 1
    #координаты по вертикали вверх - x не меняется, y увеличивается
    i = 1
    while y + i <= 8:
        res.append((x, y + i))
        i += 1
    
    #координаты по диагонали вверх влево - x уменьшается, y увеличивается
    i = 1
    while x - i >= 1 and y + i <= 8:
        res.append((x - i, y + i))
        i += 1
    #координаты по диагонали вниз влево - x уменьшается, y уменьшается
    i = 1
    while x - i >= 1 and y - i >= 1:
        res.append((x-i, y-i))
        i += 1
    #координаты по диагонали вверх вправо - x увеличивается, y увеличивается
    i = 1
    while x + i <= 8 and y + i <= 8:
        res.append((x + i, y + i))
        i += 1
    #координаты по диагонали вниз вправо - x увеличивается, y уменьшается
    i = 1
    while x + i <= 8 and y - i >= 1:
        res.append((x + i, y - i))
        i += 1

    return res

#получаем координаты ферзей
ferzi = []
for i in range(8):
    f=[]
    x = int(input(f'Введите координату x {i + 1} ферзя: '))
    f.append(x)
    y = int(input(f'Введите координату y {i + 1} ферзя: ') )
    f.append(y)
    f = tuple(f)
    ferzi.append(f)
ferzi = list(set(ferzi)) #исключаем повторения координат	
#print('Координаты ферзей: ', ferzi)

#проверяем совпадает ли поле действия каждой ферзи с координатами 
#других ферзей
flag = False
for i in ferzi:
    pole = ferz(i) #получаем поле действия ферзи с координатами i
    for j in pole:
        if j in ferzi:
            flag = True
            break

if flag:
    print('Yes')
else:
    print('No')



